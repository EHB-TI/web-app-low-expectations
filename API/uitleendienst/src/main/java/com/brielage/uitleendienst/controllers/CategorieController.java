package com.brielage.uitleendienst.controllers;

import com.brielage.uitleendienst.authorization.JWTChecker;
import com.brielage.uitleendienst.authorization.OriginChecker;
import com.brielage.uitleendienst.authorization.Permission;
import com.brielage.uitleendienst.models.Categorie;
import com.brielage.uitleendienst.repositories.CategorieRepository;
import com.brielage.uitleendienst.responses.Responder;
import com.brielage.uitleendienst.tools.APILogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@SuppressWarnings ("rawtypes")
@RestController
@RequestMapping (value = "/categorie")
public class CategorieController {
    @SuppressWarnings ("SpringJavaAutowiredFieldsWarningInspection")
    @Autowired
    private CategorieRepository categorieRepository;

    @GetMapping (value = { "/", "" })
    public ResponseEntity findByProperties (
            @RequestParam (required = false) List<String> naam,
            @RequestHeader ("Authorization") String token,
            @RequestHeader ("Origin") String origin) {
        APILogger.logRequest("categorie.get*");

        if (!OriginChecker.checkOrigin(origin))
            return Responder.respondBadRequest("origin not allowed " + origin);

        if (naam == null || naam.isEmpty()) {
            APILogger.logRequest("categorie.findAll");
            List<Categorie> ret = categorieRepository.findAll();

            if (ret.isEmpty()) return Responder.respondNotFound();

            return Responder.respondOk(ret);
        }

        APILogger.logRequest("categorie.findAllByNaam");
        List<Categorie> ret = categorieRepository.findByNaamIsIn(naam);

        if (ret.isEmpty()) return Responder.respondNotFound();

        return Responder.respondOk(ret);
    }

    @GetMapping ("/{id}")
    public ResponseEntity findById (
            @PathVariable String id,
            @RequestHeader ("Authorization") String token,
            @RequestHeader ("Origin") String origin) {
        APILogger.logRequest("categorie.findById", id);

        if (!OriginChecker.checkOrigin(origin))
            return Responder.respondBadRequest("origin not allowed " + origin);

        Optional<Categorie> c = categorieRepository.findById(id);

        if (c.isEmpty()) return Responder.respondNotFound();

        return Responder.respondOk(c.get());
    }

    @PostMapping (value = { "/", "" })
    public ResponseEntity create (
            @RequestBody Categorie categorie,
            @RequestHeader ("Authorization") String token,
            @RequestHeader ("Origin") String origin) {
        APILogger.logRequest("categorie.create", categorie.toString());

        if (!OriginChecker.checkOrigin(origin))
            return Responder.respondBadRequest("origin not allowed " + origin);

        if (!JWTChecker.checkToken(token)) return Responder.respondUnauthorized();

        if (!JWTChecker.checkPermission(token, Permission.ADMIN))
            return Responder.respondForbidden();

        try {
            if (!validateCategorie(categorie))
                return Responder.respondBadRequest("not valid");

            // ignore ID when creating, will get automagically generated by DB
            categorie.setId(null);
            Categorie c = categorieRepository.save(categorie);

            return Responder.respondCreated(c);
        } catch (Exception e) {
            return Responder.respondBadRequest(e.getMessage());
        }
    }

    @PutMapping (value = "/{id}")
    public ResponseEntity put (
            @PathVariable String id,
            @RequestBody Categorie categorie,
            @RequestHeader ("Authorization") String token,
            @RequestHeader ("Origin") String origin) {
        APILogger.logRequest("categorie.put", id);

        if (!OriginChecker.checkOrigin(origin))
            return Responder.respondBadRequest("origin not allowed " + origin);

        if (!JWTChecker.checkToken(token)) return Responder.respondUnauthorized();

        if (!JWTChecker.checkPermission(token, Permission.ADMIN))
            return Responder.respondForbidden();

        try {
            if (!validateCategorieId(categorie))
                return Responder.respondBadRequest("not valid");

            Optional<Categorie> c = categorieRepository.findById(id);

            if (c.isEmpty())
                return Responder.respondNotFound();

            categorie.setId(c.get()
                             .getId());
            Categorie result = categorieRepository.save(categorie);

            return Responder.respondCreated(result);
        } catch (Exception e) {
            return Responder.respondBadRequest(e.getMessage());
        }
    }

    @DeleteMapping (value = "/{id}")
    public ResponseEntity delete (
            @PathVariable String id,
            @RequestHeader ("Authorization") String token,
            @RequestHeader ("Origin") String origin) {
        APILogger.logRequest("categorie.delete", id);

        if (!OriginChecker.checkOrigin(origin))
            return Responder.respondBadRequest("origin not allowed " + origin);

        if (!JWTChecker.checkToken(token)) return Responder.respondUnauthorized();

        if (!JWTChecker.checkPermission(token, Permission.ADMIN))
            return Responder.respondForbidden();

        try {
            Optional<Categorie> c = categorieRepository.findById(id);

            if (c.isEmpty())
                return Responder.respondNotFound();

            categorieRepository.delete(c.get());

            return Responder.respondNoContent("deleted");
        } catch (Exception e) {
            return Responder.respondBadRequest(e.getMessage());
        }
    }

    private boolean validateCategorieId (Categorie c) {
        if (c.getId()
             .isEmpty())
            return false;
        return validateCategorie(c);
    }

    private boolean validateCategorie (Categorie c) {
        return !c.getNaam()
                 .isEmpty();
    }

}
