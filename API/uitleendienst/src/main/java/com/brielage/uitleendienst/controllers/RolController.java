package com.brielage.uitleendienst.controllers;

import com.brielage.uitleendienst.models.Rol;
import com.brielage.uitleendienst.repositories.RolRepository;
import com.brielage.uitleendienst.tools.APILogger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping (value = "/rol")
public class RolController {
    @SuppressWarnings ("SpringJavaAutowiredFieldsWarningInspection")
    @Autowired
    private RolRepository rolRepository;

    @GetMapping (value = { "/", "" })
    public ResponseEntity findByProperties (@RequestParam (required = false) List<String> naam) {
        if (naam == null || naam.isEmpty()) {
            List<Rol> rollen = rolRepository.findAll();

            if (rollen.isEmpty())
                return ResponseEntity.notFound()
                                     .build();

            return ResponseEntity.ok()
                                 .body(rollen);
        }

        List<Rol> rollen = rolRepository.findAllByNaamIsIn(naam);

        if (rollen.isEmpty())
            return ResponseEntity.notFound()
                                 .build();

        return ResponseEntity.ok()
                             .body(rollen);
    }

    @GetMapping ("/{id}")
    public ResponseEntity findById (@PathVariable String id) {
        Optional<Rol> r = rolRepository.findById(id);

        if (r.isPresent())
            return ResponseEntity.ok()
                                 .body(r.get());

        return ResponseEntity.notFound()
                             .build();
    }

    @PostMapping (value = { "/", "" })
    public ResponseEntity create (@RequestBody Rol rol) {
        try {
            if (!validateRol(rol) || rolNaamExists(rol.getNaam()))
                return ResponseEntity.badRequest()
                                     .build();

            // ignore ID when creating, will get automagically generated by DB
            rol.setId(null);
            Rol r = rolRepository.save(rol);

            return new ResponseEntity(r, HttpStatus.CREATED);
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    @PutMapping (value = "/{id}")
    public ResponseEntity put (
            @PathVariable String id,
            @RequestBody Rol rol) {
        try {
            if (!validateRolId(rol))
                return ResponseEntity.badRequest()
                                     .build();

            Optional<Rol> r = rolRepository.findById(id);

            if (r.isEmpty())
                return ResponseEntity.notFound()
                                     .build();

            if (rolNaamExistsWithDifferentId(rol))
                return ResponseEntity.badRequest()
                                     .build();

            Rol result = rolRepository.save(rol);

            return new ResponseEntity(result, HttpStatus.CREATED);
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    @DeleteMapping (value = "/{id}")
    public ResponseEntity delete (@PathVariable String id) {
        try {
            Optional<Rol> r = rolRepository.findById(id);

            if (r.isEmpty())
                return ResponseEntity.badRequest()
                                     .build();

            rolRepository.delete(r.get());

            return ResponseEntity.noContent()
                                 .build();
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    private boolean validateRolId (Rol r) {
        if (r.getId()
             .isEmpty()) {
            APILogger.logResult("ID IS EMPTY");
            return false;
        }
        return validateRol(r);
    }

    private boolean validateRol (Rol r) {
        return validateNaam(r.getNaam());
    }

    private boolean validateNaam (String naam) {
        if (naam == null || naam.isEmpty()) {
            APILogger.logResult("NAAM IS NULL OR EMPTY");
            return false;
        }
        if (naam.contains(" ")) {
            APILogger.logResult("NAAM CONTAINS SPACE");
            return false;
        }

        return true;
    }

    private boolean rolNaamExists (String naam) {
        if (naam == null || naam.isEmpty()) return false;
        return rolRepository.findByNaam(naam)
                            .isPresent();
    }

    private boolean rolNaamExistsWithDifferentId (Rol rol) {
        Optional<Rol> optionalRol = rolRepository.findByNaam(rol.getNaam());
        if (optionalRol.isEmpty()) return false;
        Rol r = optionalRol.get();
        return !r.getId()
                 .equals(rol.getId());
    }
}
