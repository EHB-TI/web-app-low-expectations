package com.brielage.uitleendienst.controllers;

import com.brielage.uitleendienst.models.Organisatie;
import com.brielage.uitleendienst.repositories.OrganisatieRepository;
import com.brielage.uitleendienst.tools.RemoveDuplicates;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping (value = "/organisatie")
public class OrganisatieController {
    @SuppressWarnings ("SpringJavaAutowiredFieldsWarningInspection")
    @Autowired
    private OrganisatieRepository organisatieRepository;

    @GetMapping (value = { "/", "" })
    public ResponseEntity findByProperties (
            @RequestParam (required = false) List<String> naam,
            @RequestParam (required = false) List<String> email) {
        if ((naam == null || naam.isEmpty())
                && (email == null || email.isEmpty())) {
            List<Organisatie> organisaties = organisatieRepository.findAll();

            if (organisaties.isEmpty())
                return ResponseEntity.notFound()
                                     .build();

            return ResponseEntity.ok()
                                 .body(organisaties);
        }

        List<Organisatie> organisaties = new ArrayList<>();

        if (naam != null && !naam.isEmpty())
            organisaties.addAll(organisatieRepository.findAllByNaamIsIn(naam));
        if (email != null && !email.isEmpty())
            organisaties.addAll(organisatieRepository.findAllByEmailIsIn(email));

        organisaties = RemoveDuplicates.removeDuplicates(organisaties);

        if (organisaties.isEmpty())
            return ResponseEntity.notFound()
                                 .build();

        return ResponseEntity.ok()
                             .body(organisaties);
    }

    @GetMapping ("/{id}")
    public ResponseEntity findById (@PathVariable String id) {
        Optional<Organisatie> c = organisatieRepository.findById(id);

        if (c.isPresent())
            return ResponseEntity.ok()
                                 .body(c.get());

        return ResponseEntity.notFound()
                             .build();
    }

    @PostMapping (value = { "/", "" })
    public ResponseEntity create (@RequestBody Organisatie organisatie) {
        try {
            if (!validateOrganisatie(organisatie))
                return ResponseEntity.badRequest()
                                     .build();

            // ignore ID when creating, will get automagically generated by DB
            organisatie.setId(null);
            Organisatie o = organisatieRepository.save(organisatie);

            return new ResponseEntity(o, HttpStatus.CREATED);
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    @PutMapping (value = "/{id}")
    public ResponseEntity put (
            @PathVariable String id,
            @RequestBody Organisatie organisatie) {
        try {
            if (!validateOrganisatieId(organisatie))
                return ResponseEntity.badRequest()
                                     .build();

            Optional<Organisatie> o = organisatieRepository.findById(id);

            if (o.isEmpty())
                return ResponseEntity.notFound()
                                     .build();

            organisatie.setId(o.get()
                               .getId());
            Organisatie result = organisatieRepository.save(organisatie);

            return new ResponseEntity(result, HttpStatus.CREATED);
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    @DeleteMapping (value = "/{id}")
    public ResponseEntity delete (@PathVariable String id) {
        try {
            Optional<Organisatie> o = organisatieRepository.findById(id);

            if (o.isEmpty())
                return ResponseEntity.badRequest()
                                     .build();

            organisatieRepository.delete(o.get());

            return ResponseEntity.noContent()
                                 .build();
        } catch (Exception e) {
            return ResponseEntity.badRequest()
                                 .build();
        }
    }

    private boolean validateOrganisatieId (Organisatie o) {
        if (o.getId()
             .isEmpty())
            return false;
        return validateOrganisatie(o);
    }

    private boolean validateOrganisatie (Organisatie o) {
        return validateNaam(o.getNaam())
                && validateAdres(o.getAdres())
                && validateEmail(o.getEmail())
                && validateTelefoon(o.getTelefoon());
    }

    private boolean validateNaam (String naam) {
        return naam != null && !naam.isEmpty();
    }

    private boolean validateAdres (String adres) {
        return adres != null && !adres.isEmpty();
    }

    private boolean validateEmail (String email) {
        if (email == null || email.isEmpty()) return false;
        return email.contains("@");
    }

    private boolean validateTelefoon (String telefoon) {
        return telefoon != null && !telefoon.isEmpty();
    }
}
